#!/bin/bash
version=v1.0.4

# If you symlink psdb's absolute path to a root privilaged dir, some things fail unless we only use the actual real path and not the symlink's. See https://github.com/alex-free/playstation-disc-burner/pull/2.
real_portable_folder="$(dirname "$(readlink -f "$0")")"
# Add all the self-contained binaries we need to the $PATH used within this script.
PATH=""$real_portable_folder"/bin${PATH:+:$PATH}"
echo -e "PlayStation Disc Burner (PSDB) $version By Alex Free\n\nPATH: $PATH\n\nTools:"
# Stop if tool not found.
set -e
which cdrdao
which cdrecord
which psx80mp
which lcp
which ps2_master
which esrtool
which 7za
which edcre
echo
set +e
# Unset stop on error.

change_raw_config() 
{
    echo "RAW burning enabled: $raw_enabled"

    while true; do
        if [[ "$raw_enabled" == "yes" ]]; then
            read -p "Do you want to turn off RAW burning? (Y/n)" raw_response
        
            if [[ "$raw_response" == "y" || "$raw_response" == "Y" ]]; then
                set_raw_config_val=no
            fi
        
        elif [[ "$raw_enabled" == "no" ]]; then
            read -p "Do you want to turn on RAW burning? (Y/n)" raw_response

            if [[ "$raw_response" == "y" || "$raw_response" == "Y" ]]; then
                set_raw_config_val=yes
            fi
        fi

        if [[ "$raw_response" == "y" || "$raw_response" == "Y" ]]; then
            echo "$set_raw_config_val" > "$real_portable_folder"/config/raw.txt
            echo "RAW burning config has been changed."
            break
        fi

        if [[ "$raw_response" == "n" || "$raw_response" == "N" ]]; then
            echo "RAW burning config was not changed."
            break
        fi
    done
}

change_burner() 
{
    echo "Enter the cd burner devname, i.e default for linux is /dev/sr0:"
    read -p "Burner:" burner

    echo "$burner" > "$real_portable_folder"/config/burner.txt
}

change_cd_burn_speed() 
{
    echo "Enter a number for the speed to burn CDs at. If your burner does not support the speed you provide the closest available speed will be used instead."
    read -p "Set burn speed:" speed

    while [[ ! "$speed" =~ ^[0-9]+$ ]]; do
        echo "${speed} is not a number, try again"
        read -p "Set burn speed:" speed
    done

    echo "$speed" > "$real_portable_folder"/config/cd-burn-speed.txt
}

change_dvd_burn_speed() 
{
    echo "Enter a number for the speed to burn DVDs at. If your burner does not support the speed you provide the closest available speed will be used instead."
    read -p "Set burn speed:" speed

    while [[ ! "$speed" =~ ^[0-9]+$ ]]; do
        echo "${speed} is not a number, try again"
        read -p "Set burn speed:" speed
    done

    echo "$speed" > "$real_portable_folder"/config/dvd-burn-speed.txt
}

if [ $# -ne 1 ] && [ $# -ne 2 ]; then
    echo -e "Error: PSDB requires 1 or 2 arguments.\n\nUsage:\n\npsdb <input file>\n\n<input file>     A file ending in .iso, .ISO, .cue, .CUE, .BIN, or .bin (or a compressed archive containing said files).\n\npsdb -cds <cd burn speed>      Set burn speed for CDs to <cd burn speed> and exit.\n\npsdb -dvds <dvd burn speed>      Set burn speed to <dvd burn speed> for DVDs and exit.\n\npsdb -b <burner>      Set burner to <burner> (i.e. \"/dev/sr0\").\n\npsdb -r <yes/no>      Enable RAW writing (not compatibile with some burners, default is no).\n"
    exit 1
fi

# Create config dir.
mkdir -p "$real_portable_folder"/config

if [ $# -eq 2 ]; then
    if [ "$1" == "-cds" ]; then
        if [[ ! "$2" =~ ^[0-9]+$ ]]; then
            echo "Error: specified burn speed: \"$2\" is not a number"
            exit 1
        fi

        echo "$2" > "$real_portable_folder"/config/cd-burn-speed.txt
        echo "CD burn speed set to \"$2"\"
        exit 0
    elif [ "$1" == "-dvds" ]; then
        if [[ ! "$2" =~ ^[0-9]+$ ]]; then
            echo "Error: specified burn speed: \"$2\" is not a number"
            exit 1
        fi

        echo "$2" > "$real_portable_folder"/config/dvd-burn-speed.txt
        echo "DVD burn speed set to \"$2"\"
        exit 0
    elif [ "$1" == "-b" ]; then
        echo "$2" > "$real_portable_folder"/config/burner.txt
        echo "Burner set to \"$2"\"
        exit 0
    elif [ "$1" == "-r" ]; then
        if [[ "$2" != "yes" && "$2" != "no" ]]; then
            echo "Error: 2nd argument was not yes or no, unsure what to set raw burning status to."
            exit 1
        fi

        echo "$2" > "$real_portable_folder"/config/raw.txt
        echo "RAW burning capability set to \"$2"\"
        exit 0 
    else
        echo "Error: 2 arguemnts were given, and the first argument was not -cds, -dvds, -b, or -r"
        exit 1
    fi
fi

if [ ! -f "$1" ]; then
    echo "Error: Cant open the file "$1""
    exit 1
fi

# CD burn speed.
if [ ! -f ""$real_portable_folder"/config/cd-burn-speed.txt" ]; then
    echo "CD burn speed config not found, setting to default speed of 1x"
    echo 1 > "$real_portable_folder"/config/cd-burn-speed.txt
fi

cd_burn_speed=$(cat "$real_portable_folder"/config/cd-burn-speed.txt)

# DVD burn speed.
if [ ! -f ""$real_portable_folder"/config/dvd-burn-speed.txt" ]; then
    echo "DVD burn speed config not found, setting to default speed of 1x"
    echo 1 > "$real_portable_folder"/config/dvd-burn-speed.txt
fi

dvd_burn_speed=$(cat "$real_portable_folder"/config/dvd-burn-speed.txt)

# Burner.
if [ ! -f ""$real_portable_folder"/config/burner.txt" ]; then
    mkdir -p config
    echo "Burner config not found, setting to default value of /dev/sr0"
    echo "/dev/sr0" > "$real_portable_folder"/config/burner.txt
fi

burner=$(cat "$real_portable_folder"/config/burner.txt)
echo -e "\nBurner: $burner"

# RAW burn enabled?
if [ ! -f ""$real_portable_folder"/config/raw.txt" ]; then
    echo "RAW burning config not found, setting to default value of no"
    echo "no" > "$real_portable_folder"/config/raw.txt
fi

raw_enabled=$(cat "$real_portable_folder"/config/raw.txt)
echo -e "\nRAW burning enabled: $raw_enabled"

# Put temp directory in /tmp (or whatever the OS prefers).
tmp=$(mktemp -d --tmpdir ps2db.XXX)

# When this script exits, automatically delete the temp directory.
cleanup() 
{ 
    if [[ -e $tmp ]]; then
        echo "Clearing temp files..."  
        rm -r $tmp   
    fi
}
trap cleanup EXIT

# Print out any uncaught errors.
err() 
{	
    echo -e "\nUncaught error in $0, line number: $BASH_LINENO" >&2
    exit 1
}
trap err ERR

if [ ! -f "$1" ]; then
    echo "Error: Can not open file: "$1"\n"
    exit 1
else
    output_dir=$(dirname "$1")

    if file "$1" | grep "UDF filesystem data" > /dev/null 2>&1; then
        output_base_name=$(basename "$1")
        output_base_name_without_extension="${output_base_name%.*}"
        input_extension="${1##*.}"
        cp "$1" $tmp/"$output_base_name_without_extension"."$input_extension"
        echo -e "\nWhat do you want to do with \""$1"\"?\n"
    elif file "$1" | grep -q ": data\|ASCII"; then # ': data' matches bin files, 'ASCII' matches cue files.
        shopt -s nocaseglob  # Enable case-insensitive globbing
        cp -rv "$(dirname "$1")"/*.{bin,BIN,cue,CUE} "$tmp" > /dev/null 2>&1
        shopt -u nocaseglob  # Disable case-insensitive globbing

        data_track=$(find $tmp -maxdepth 1 -type f \( -name "*.bin" -o -name "*.BIN" \) | sort | head -n 1)
        base_data_track=$(basename "$data_track")

        cue_file=$(find $tmp -maxdepth 1 -type f \( -name "*.cue" -o -name "*.CUE" \) | sort | head -n 1)
        base_cue_file=$(basename "$cue_file")

        output_target_directory="${base_cue_file%.*}" # strip extension

        output_parent_directory=$(dirname "$1")
        output_parent_directory=""$output_parent_directory"/../" # we were given a BIN or CUE file which is in a directory itself. We want the output one directory above this for consistancy with archived file handling output by this script
        output_parent_directory_base_name=$(basename "$1")

        echo -e "\nWhat do you want to do with \"$base_data_track\"?\n"
    else
        7za e "$1" -o$tmp
        multiple_files=$(ls -1a $tmp/*.iso $tmp/*.ISO 2> /dev/null | wc -l)

        if [[ $multiple_files -gt 1 ]]; then # Got multiple DVD ISOs
            echo -e "\nError: multiple ISO files found in archive file: $1 :\n"
            ls -1a $tmp/*.iso $tmp/*.ISO 2> /dev/null
            echo -e "\nOnly one ISO file with extension .iso or .ISO can be in the archive file: $1 for it to be supported for prooccessing by PS2DB"
            exit 1
        elif [[ $multiple_files -eq 0 ]]; then # No ISO/iso files, what about BIN/bin files?
            multiple_files=$(ls -1a $tmp/*.bin $tmp/*.BIN 2> /dev/null | wc -l)

            if [[ $multiple_files -eq 0 ]]; then # Neither
                echo "Error: Neither an ISO file with either extension .iso or .ISO or a BIN file with .bin or .BIN was found in the root of the given archive file $1"
                exit 1
            else # Got CD
                data_track=$(find $tmp -maxdepth 1 -type f \( -name "*.bin" -o -name "*.BIN" \) | sort | head -n 1)
                base_data_track=$(basename "$data_track")

                cue_file=$(find $tmp -maxdepth 1 -type f \( -name "*.cue" -o -name "*.CUE" \) | sort | head -n 1)
                base_cue_file=$(basename "$cue_file")

                output_target_directory="${base_cue_file%.*}" # strip extension

                output_parent_directory=$(dirname "$1")
                output_parent_directory_base_name=$(basename "$1")

                echo -e "\nWhat do you want to do with \"$base_data_track\" (found in \"$1\")?\n"
            fi
        elif [[ $multiple_files -eq 1 ]]; then # For DVD
            shopt -s nocaseglob  # Enable case-insensitive globbing
            temp_iso_file=$(ls -1a  $tmp/*.{ISO,iso})
            shopt -u nocaseglob  # Disable case-insensitive globbing

            output_base_name=$(basename "$temp_iso_file")
            output_base_name_without_extension="${output_base_name%.*}"
            input_extension="${temp_iso_file##*.}"
            echo -e "\nWhat do you want to do with \"$output_base_name_without_extension.$input_extension\" (found in \"$1\")?\n"
        fi
    fi

fi

if [ -z "$data_track" ]; then

echo -e "(DVD burn speed is set to "$dvd_burn_speed"x)\n"

echo =====================================
echo DVD ISO Options
echo =====================================

PS3="Enter an option number: "
    select opt in Burn "Add ESR patch" "Add ESR patch and burn" "Add Master Disc patch" "Add Master Disc patch and burn" "Change burner" "Change burn speed" Quit; do    
    case $opt in
        "Burn")
            mode=2
            break
            ;;
        "Add ESR patch")
            mode=3
            break
            ;;
        "Add ESR patch and burn")
            mode=4
            break
            ;;
        "Add Master Disc patch")
            mode=5
            break
            ;;
        "Add Master Disc patch and burn")
            mode=6
            break
            ;;
        "Change burner")
            change_burner
            exit 0
            ;;
        "Change burn speed")
            change_dvd_burn_speed
            exit 0
            ;;
        Quit)
            exit 0
            ;;
        *) 
            echo "Invalid option $REPLY, try again"
            ;;
    esac
done

else # CD

echo -e "(CD burn speed is set to "$cd_burn_speed"x)\n"

echo =====================================
echo CD BIN/CUE Options
echo =====================================

PS3="Enter an option number: "
    select opt in Burn "Add Master Disc patch"  "Add Master Disc patch and burn" "Add LibCrypt patch" "Add LibCrypt patch and burn" "Add PSX 80 Minute patch" "Add PSX 80 Minute patch and burn" "Change burner" "Change burn speed" "Enable/disable RAW writing" Quit; do    
    case $opt in
        "Burn")
            mode=2
            break
            ;;
        "Add Master Disc patch")
            mode=5
            break
            ;;
        "Add Master Disc patch and burn")
            mode=6
            break
            ;;
        "Add LibCrypt patch")
            mode=7
            break
            ;;
        "Add LibCrypt patch and burn")
            mode=8
            break
            ;;
        "Add PSX 80 Minute patch")
            mode=9
            break
            ;;
        "Add PSX 80 Minute patch and burn")
            mode=10
            break
            ;;
        "Change burner")
            change_burner
            exit 0
            ;;
        "Change burn speed")
            change_cd_burn_speed
            exit 0
            ;;
        "Enable/disable RAW writing")
            change_raw_config
            exit 0
            ;;
        Quit)
            exit 0
            ;;
        *) 
            echo "Invalid option $REPLY, try again"
            ;;
    esac
done

fi

## Patch

if [ ! -z "$data_track" ]; then # CD, so regen EDC/ECC after system volume descriptor
    # If we do RAW burning, we still EDCRE sector 16+ to correct patches/mods that don't re-generate EDC data. This still doesn't trip EDC protection because that doesn't check sector 16+
    if [ "$raw_enabled" == "yes" ]; then
        echo "RAW mode enabled. Regenerating sector 16 and up."
        edcre -v -s 16 "$data_track"
    fi
fi

if [ "$mode" == "3" ] || [ "$mode" == "4" ]; then # add esr
    esrtool p $tmp/"$output_base_name_without_extension"."$input_extension"
    mv $tmp/"$output_base_name_without_extension".iso "$output_dir"/"$output_base_name_without_extension"_ESR."$input_extension"
elif [ "$mode" == "5" ] || [ "$mode" == "6" ]; then # add master disc patch
    if [ -z "$data_track" ]; then # DVD
        ps2_master $tmp/"$output_base_name_without_extension"."$input_extension"
        rm -f DVD_Sectors.Bin
        mv $tmp/"$output_base_name_without_extension".iso "$output_dir"/"$output_base_name_without_extension"_MD."$input_extension"
    else # CD
        ps2_master "$data_track"
        rm -f CD_Sectors.Bin
        mkdir -p "$output_parent_directory"/"$output_target_directory"_MD
        mv $tmp/* "$output_parent_directory"/"$output_target_directory"_MD
    fi
elif [ "$mode" == "7" ] || [ "$mode" == "8" ]; then # add LibCrypt patch
        lcp "$data_track"
        mkdir -p "$output_parent_directory"/"$output_target_directory"_LCP
        mv $tmp/* "$output_parent_directory"/"$output_target_directory"_LCP
elif [ "$mode" == "9" ] || [ "$mode" == "10" ]; then # add PSX80MP patch
        psx80mp "$data_track"
        mkdir -p "$output_parent_directory"/"$output_target_directory"_PSX80MP
        mv $tmp/* "$output_parent_directory"/"$output_target_directory"_PSX80MP
elif [ "$mode" == "2" ]; then # leave as-is, except enforce EDC/ECC correctness starting at volume descriptor for CD BIN/CUE (sectors before that are used in EDC protection of some games and are required to be invalid)
    if [[ $multiple_files -gt 0 ]]; then # Did come from compressed archive
        if [ -z "$data_track" ]; then # Is DVD
            mv $tmp/"$output_base_name_without_extension".iso "$output_dir"/"$output_base_name_without_extension"."$input_extension"
        else # Is CD
            mkdir -p "$output_parent_directory"/"$output_target_directory"
            mv $tmp/* "$output_parent_directory"/"$output_target_directory"
        fi
    fi
fi

# (sudo prevents buffer underrun/coasters/enables USB access via PLED style binaries with the USB host)

## Burn As-Is
if [ "$mode" == "2" ]; then # burn as-is    
    if [ -z "$data_track" ]; then # DVD
        if [[ $multiple_files -gt 0 ]]; then # Did come from compressed archive
            if [ "$EUID" != 0 ]; then
                echo "Info: Root privilages are required to ensure success of burn"
                sudo env PATH=$PATH cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$output_dir"/"$output_base_name_without_extension"."$input_extension"
            else
               cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$output_dir"/"$output_base_name_without_extension"."$input_extension"
            fi
        else # straight ISO
            if [ "$EUID" != 0 ]; then
                echo "Info: Root privilages are required to ensure success of burn"
                sudo env PATH=$PATH cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$1"
            else
                cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$1"
            fi
        fi
    else # CD
        if [[ $multiple_files -gt 0 ]]; then # Did come from compressed archive
            cd "$output_parent_directory"/"$output_target_directory"
        else
            burn_dir=$(dirname "$1")
            cd "$burn_dir"
        fi
        
        if [ "$EUID" != 0 ]; then
            echo "Info: Root privilages are required to ensure success of burn"
            # The env command is used here becaue sudo context looses our custom path. We need to do nothing if already root.
            if [ "$raw_enabled" == "yes" ]; then
                sudo env PATH=$PATH cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
            else
                # So --driver generic-mmc is the default, it doesn't need to be specified.
                sudo env PATH=$PATH cdrdao write --device "$burner" --speed $cd_burn_speed --swap --eject -n "$base_cue_file"
            fi
        else
            if [ "$raw_enabled" == "yes" ]; then
                cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
            else
                # So --driver generic-mmc is the default, it doesn't need to be specified.
                cdrdao write --device "$burner" --speed $cd_burn_speed --swap --eject -n "$base_cue_file"
            fi
        fi
    fi

# Burn Patched
elif [ "$mode" == "4" ]; then # burn esr
    if [ "$EUID" != 0 ]; then
        echo "Info: Root privilages are required to ensure success of burn"
        sudo env PATH=$PATH cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$output_dir"/"$output_base_name_without_extension"_ESR."$input_extension"
    else
       cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$output_dir"/"$output_base_name_without_extension"_ESR."$input_extension"
    fi
elif [ "$mode" == "6" ]; then # burn master disc    
    if [ -z "$data_track" ]; then # Master Disc is DVD
        if [ "$EUID" != 0 ]; then
            echo "Info: Root privilages are required to ensure success of burn"
            sudo env PATH=$PATH cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$output_dir"/"$output_base_name_without_extension"_MD."$input_extension"
        else
            cdrecord -v dev="$burner" --speed=$dvd_burn_speed --eject "$output_dir"/"$output_base_name_without_extension"_MD."$input_extension"
        fi
    else # Master Disc is CD
        cd "$output_parent_directory"/"$output_target_directory"_MD # CDRDAO is incapable of finding bin files relative to the cue when not in the same working directory

        if [ "$EUID" != 0 ]; then
            echo "Info: Root privilages are required to ensure success of burn"
            sudo env PATH=$PATH cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
        else
            cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
        fi
    fi
elif [ "$mode" == "8" ]; then # LibCrypt is CD
    cd "$output_parent_directory"/"$output_target_directory"_LCP # CDRDAO is incapable of finding bin files relative to the cue when not in the same working directory

    if [ "$EUID" != 0 ]; then
        echo "Info: Root privilages are required to ensure success of burn"
        sudo env PATH=$PATH cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
    else
        cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
    fi

elif [ "$mode" == "10" ]; then # PSX80MP is CD
    cd "$output_parent_directory"/"$output_target_directory"_PSX80MP # CDRDAO is incapable of finding bin files relative to the cue when not in the same working directory

    if [ "$EUID" != 0 ]; then
        echo "Info: Root privilages are required to ensure success of burn"
        sudo env PATH=$PATH cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
    else
        cdrdao write --device "$burner" --speed $cd_burn_speed --driver generic-mmc-raw --swap --eject -n "$base_cue_file"
    fi
fi
